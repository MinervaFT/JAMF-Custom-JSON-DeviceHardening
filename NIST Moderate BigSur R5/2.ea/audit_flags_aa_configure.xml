<computer_extension_attribute>
<id>0</id>
<name>800-53r5_moderate - audit_flags_aa_configure</name>
<description>The auditing system _MUST_ be configured to flag authorization and authentication (aa) events.

Authentication events contain information about the identity of a user, server, or client. Authorization events contain information about permissions, rights, and rules. If audit records do not include aa events, it is difficult to identify incidents and to correlate incidents to subsequent events. 

Audit records can be generated from various components within the information system (e.g., via a module or policy filter).
</description>
<data_type>String</data_type>
<input_type>
<type>script</type>
<platform>Mac</platform>
<script>#!/bin/zsh        &#13;
#####----- Rule: audit_flags_aa_configure -----#####&#13;
## Addresses the following NIST 800-53 controls: &#13;
# * AC-2(12)&#13;
# * AU-12&#13;
# * AU-2&#13;
# * CM-5(1)&#13;
# * MA-4(1)&#13;
rule_arch=""&#13;
plb="/usr/libexec/PlistBuddy"&#13;
# setup files&#13;
audit_plist_managed="/Library/Managed Preferences/org.800-53r5_moderate.audit.plist"&#13;
&#13;
if [[ ! -e "$audit_plist_managed" ]];then&#13;
    audit_plist_managed="/Library/Preferences/org.800-53r5_moderate.audit.plist"&#13;
fi&#13;
&#13;
audit_plist="/Library/Preferences/org.800-53r5_moderate.audit.plist"&#13;
audit_log="/Library/Logs/800-53r5_moderate_baseline.log"&#13;
if [[ "$arch" == "$rule_arch" ]] || [[ -z "$rule_arch" ]]; then&#13;
    #echo 'Running the command to check the settings for: audit_flags_aa_configure ...' &#13;
    unset result_value&#13;
    result_value=$(/usr/bin/awk -F':' '/^flags/ { print $NF }' /etc/security/audit_control | /usr/bin/tr ',' '\n' | /usr/bin/grep -Ec 'aa')&#13;
    # expected result {'integer': 1}&#13;
&#13;
    # check to see if rule is exempt&#13;
    unset exempt&#13;
    unset exempt_reason&#13;
    exempt=$($plb -c "print audit_flags_aa_configure:exempt" "$audit_plist_managed" 2&gt;/dev/null)&#13;
    exempt_reason=$($plb -c "print audit_flags_aa_configure:exempt_reason" "$audit_plist_managed" 2&gt;/dev/null)&#13;
&#13;
    if [[ ! $exempt == "true" ]] || [[ -z $exempt ]];then&#13;
        if [[ $result_value == "1" ]]; then&#13;
            echo "&lt;result&gt;audit_flags_aa_configure passed (Result: $result_value, Expected: "{'integer': 1}")&lt;/result&gt;" &#13;
            &#13;
        else&#13;
            echo "&lt;result&gt;audit_flags_aa_configure failed (Result: $result_value, Expected: "{'integer': 1}")&lt;/result&gt;" &#13;
            &#13;
        fi&#13;
    elif [[ ! -z "$exempt_reason" ]];then&#13;
        echo "&lt;result&gt;audit_flags_aa_configure has an exemption (Reason: "$exempt_reason")&lt;/result&gt;" &#13;
        &#13;
        /bin/sleep 1&#13;
    fi&#13;
else&#13;
    echo "&lt;result&gt;audit_flags_aa_configure does not apply to this architechture&lt;/result&gt;" &#13;
fi</script>
</input_type>
<inventory_display>Extension Attributes</inventory_display>
<recon_display>Extension Attributes</recon_display>
</computer_extension_attribute>
            