<computer_extension_attribute>
<id>0</id>
<name>800-53r5_moderate - sysprefs_media_sharing_disabled</name>
<description>Media sharing _MUST_ be disabled.

When Media Sharing is enabled, the computer starts a network listening service that shares the contents of the user's music collection with other users in the same subnet. 

The information system _MUST_ be configured to provide only essential capabilities. Disabling Media Sharing helps prevent the unauthorized connection of devices and the unauthorized transfer of information. Disabling Media Sharing mitigates this risk.

NOTE: The Media Sharing preference panel will still allow "Home Sharing" and "Share media with guests" to be checked but the service will not be enabled.
</description>
<data_type>String</data_type>
<input_type>
<type>script</type>
<platform>Mac</platform>
<script>#!/bin/zsh        &#13;
#####----- Rule: sysprefs_media_sharing_disabled -----#####&#13;
## Addresses the following NIST 800-53 controls: &#13;
# * AC-17&#13;
# * AC-3&#13;
rule_arch=""&#13;
plb="/usr/libexec/PlistBuddy"&#13;
# setup files&#13;
audit_plist_managed="/Library/Managed Preferences/org.800-53r5_moderate.audit.plist"&#13;
&#13;
if [[ ! -e "$audit_plist_managed" ]];then&#13;
    audit_plist_managed="/Library/Preferences/org.800-53r5_moderate.audit.plist"&#13;
fi&#13;
&#13;
audit_plist="/Library/Preferences/org.800-53r5_moderate.audit.plist"&#13;
audit_log="/Library/Logs/800-53r5_moderate_baseline.log"&#13;
if [[ "$arch" == "$rule_arch" ]] || [[ -z "$rule_arch" ]]; then&#13;
    #echo 'Running the command to check the settings for: sysprefs_media_sharing_disabled ...' &#13;
    unset result_value&#13;
    result_value=$(/usr/bin/osascript -l JavaScript &lt;&lt; EOS&#13;
function run() {&#13;
  let pref1 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.preferences.sharing.SharingPrefsExtension')\&#13;
  .objectForKey('homeSharingUIStatus'))&#13;
  let pref2 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.preferences.sharing.SharingPrefsExtension')\&#13;
  .objectForKey('legacySharingUIStatus'))&#13;
  let pref3 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.preferences.sharing.SharingPrefsExtension')\&#13;
  .objectForKey('mediaSharingUIStatus'))&#13;
  if ( pref1 == 0 &amp;&amp; pref2 == 0 &amp;&amp; pref3 == 0 ) {&#13;
    return("true")&#13;
  } else {&#13;
    return("false")&#13;
  }&#13;
}&#13;
EOS)&#13;
    # expected result {'string': 'true'}&#13;
&#13;
    # check to see if rule is exempt&#13;
    unset exempt&#13;
    unset exempt_reason&#13;
    exempt=$($plb -c "print sysprefs_media_sharing_disabled:exempt" "$audit_plist_managed" 2&gt;/dev/null)&#13;
    exempt_reason=$($plb -c "print sysprefs_media_sharing_disabled:exempt_reason" "$audit_plist_managed" 2&gt;/dev/null)&#13;
&#13;
    if [[ ! $exempt == "true" ]] || [[ -z $exempt ]];then&#13;
        if [[ $result_value == "true" ]]; then&#13;
            echo "&lt;result&gt;sysprefs_media_sharing_disabled passed (Result: $result_value, Expected: "{'string': 'true'}")&lt;/result&gt;" &#13;
            &#13;
        else&#13;
            echo "&lt;result&gt;sysprefs_media_sharing_disabled failed (Result: $result_value, Expected: "{'string': 'true'}")&lt;/result&gt;" &#13;
            &#13;
        fi&#13;
    elif [[ ! -z "$exempt_reason" ]];then&#13;
        echo "&lt;result&gt;sysprefs_media_sharing_disabled has an exemption (Reason: "$exempt_reason")&lt;/result&gt;" &#13;
        &#13;
        /bin/sleep 1&#13;
    fi&#13;
else&#13;
    echo "&lt;result&gt;sysprefs_media_sharing_disabled does not apply to this architechture&lt;/result&gt;" &#13;
fi</script>
</input_type>
<inventory_display>Extension Attributes</inventory_display>
<recon_display>Extension Attributes</recon_display>
</computer_extension_attribute>
            